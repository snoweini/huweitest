终端上操作
ffmpeg -i http://aisylive.oss/xxxxxxx/xxxx/180209c001_3.m3u8  output.mp4
导出m3u8成mp4

小程序循环：
  <view class='shopBox' wx:for='{{con}}' wx:key='{{index}}' wx:for-index="index" wx:for-item="con">
    <view class='shopImg'>
      <image src='{{con.image1}}' />
    </view>
  </view>
  wx:key  和vue类似 需要给一个key值 一般把index给key
  wx:for-index 重新定义循环的KEY  默认是index
  wx:for-item  重新定义循环的VALUE  默认是item

小程序绑定事件传递参数；
这个和vue有些区别  小程序不能直接在事件里把参数带走  需要在节点上做一个绑定存储
<view wx:for="{{list}}"  wx:key="{{index}}" bindtap="pageTo" data-index="{{index}}"> 
//把数据存储在 一个新绑定的prop: data-index 上
....
</view>
js:
pageTo(e){//通过e属性找回自己的节点 读取节点上的绑定数据
    var index = e.currentTarget.dataset['index'];
    console.log(index)
}

小程序样式不能直接用本地图片做背景图，
只支持：1.线上地址的图片
       2.base64 格式的图片
       3.用<image>标签引入  用样式定位的方式来解决

跳转页面  
  页面上用<navigator url="/pages/b/b?id=1&tu='a.jpg' " hover-class="none"> //?后面是带的参数

  代码跳转 wx.navigateTo({//?后面是带的参数
			    url: '/pages/b/b?id=' + 1 + "&tu=" + 'a.jpg'
			  });
接收页面处理：
onLoad: function (options) {       //options用于接收上个页面传递过来的参数
  var that = this;
  that.setData({                             //this.setData的方法用于把传递过来的id转化成小程序模板语言
		 b_id: options.id,     //id是a页面传递过来的名称，a_id是保存在本页面的全局变量   {{b_id}}方法使用
		 b_tu: options.tu,
	  })
 }

/////// 微信组件 component
类似vue的组件component
1.创建
和普通页面一样，组件也可以创建四个文件。
4个文件中的js文件
//component.js
Component({
  lifetimes: {//组件的生命周期
     attached: function() {
      // 在组件实例进入页面节点树时执行
    },
    detached: function() {
      // 在组件实例被从页面节点树移除时执行
    },
    created(){}  在组件实例刚刚被创建时执行
    attached(){}  无 在组件实例进入页面节点树时执行 1.6.3
    ready(){} 在组件在视图层布局完成后执行  1.6.3
    moved(){} 在组件实例被移动到节点树另一个位置时执行  1.6.3
    detached(){} 在组件实例被从页面节点树移除时执行 1.6.3
    error (Object Error){}  每当组件方法抛出错误时执行 2.4.1

  },
  properties: {//接收prop传过来的值
     testxt:{//父级prop名称
       type:'string',  传递的数据类型
       value:'aaa'   默认值
     }
  },
  data: {//组件私有数据
     txt:"ccccc"
  },
  methods: {//组件上的方法
    ontap(){ ... }
  }，
  pageLifetimes: {
    // 组件所在页面的生命周期函数
    show: function () { },
    hide: function () { },
    resize: function () { },
  },

2.引入
home.json
父组件的json文件中引入组件
"usingComponents":{
     "home-item":"../components/home-item/home-item"
}
和vue一样 组件里也可以引入其他组件
3.调用
home.wxml
<!-- 首页列表 -->
  <view class='join-layout'>
    <block wx:for="{{joinDatas}}" wx:for-item="joinItem">
      <!-- 这里是引入的组件名称 -->
      <home-item id="homeItem"
           <!--绑定子组件发出的事件-->
           bind:signEvent="signEvent" 
           coverUrl='{{joinItem.dakaPic}}'
           activityTitle='{{joinItem.dakaName}}'
           signTimeRange='{{joinItem.dakaTimeRange}}'
           organizerStatus='{{organizerStatus}}'
           signTimes='{{joinItem.dakaNum}}'
           signStatus='{{joinItem.status}}'>
    </home-item>
  </block>
  </view>

4.父子组件之间的通信
和vue类似  父传子 用prop  子传父 this.triggerEvent('自定义函数名'，{'key':'传递的数据'})

/*******************/
请求接口
wx.request({
  url: 'test.php', //仅为示例，并非真实的接口地址
  data: {
    x: '',
    y: ''
  },
  header: {
    'content-type': 'application/json' // 默认值
  },
  success (res) {
    console.log(res.data)
  }
})
/*****************/
本地存储
存
wx.setStorage({
  key:"key",
  data:"value"
})
读取
wx.getStorage({
  key: 'key',
  success (res) {
    console.log(res.data)
  }
})
删除
wx.removeStorage({
  key: 'key',
  success (res) {
    console.log(res)
  }
})
清除全部
wx.clearStorage()
/************************/
微信登录
1.用微信方法wx.login 读取用户的code信息
2.读取到code信息后  再请求后端提供的登录接口 把code传给后端作为登录凭证
wx.login({
  success(res){
     if(res.code){
        //请求后端的登录接口
        wx.request({
          url:'test.com/login'，//后端提供的登录接口
          data:{
            code:res.code //把code传给后台作为登录的凭证
          }
        })
     }
  }
})
/**********************/
微信授权
要使用到一些设计用户隐私的功能时 需要进行授权操作；
// 可以通过 wx.getSetting 先查询一下用户是否授权了 "scope.record" 这个 scope
wx.getSetting({
  success(res) {
    if (!res.authSetting['scope.record']) {//如果不存在表示没有授权过
      wx.authorize({
        scope: 'scope.record',
        success () {
          // 用户已经同意小程序使用录音功能，后续调用 wx.startRecord 接口不会弹窗询问
          wx.startRecord()//调取录音功能
        }
      })
    }
  }
})
/*******************/
获取用户信息
wx.getUserInfo({
    success(res){
      console.log(res)
    }
})



1100000133234
 
 
app.js文件中有3个生命周期函数：onLaunch、onShow、onHide（还有一个onError，程序出现错误时触发）
page.js文件中有5个生命周期函数：onLoad、onReady、onShow、onHide、onUnload。
一个完整的小程序执行的生命周期：
app.onLaunch -> app.onShow -> page1.onLoad -> page1.onShow -> page1.onReady
(打开程序第一个page1页面加载完成)
-> page1.onHide -> page2.onLoad -> page2.onShow -> page2.onReady
(从第一个页面新打开page2)
-> page2.onUnload -> page1.onShow ->...->page1.onUnload
(关闭page2,返回page1...退出小程序)

一个page的生命周期从onLoad开始，整个生命周期内onLoad、onReady、onUnload这三个时间仅执行一次，而onHide和onShow在每次页面隐藏和显示时都会触发。当用户手动触发左上角的退出箭头时，小程序仅触发app.onHide，下次进入小程序时会触发app.onShow以及当前page.onShow.仅当小程序在后台运行超过一定时间未被唤起、或者用户手动在小程序的控制栏里点击退出程序、或者小程序内存占用过大被关闭时，小程序将被销毁，会触发page.onUnload事件。
每个小程序分为2个线程，view与appServer。其中view线程负责解析渲染页面（wxml和wxss），而appServer线程负责运行js。由于js不跑在web-view里，就不能直接操纵DOM和BOM，这就是小程序没有window全局变量的原因。
 
 
 可以看到 setData函数是 
1. 将数据从逻辑层发送到视图层是异步 
2. 改变this.data是同步的 
也就是说改变值是同步的,改变值之后渲染页面是异步的, 
应该是为了提高性能,不可能改变一次数据渲染一次页面,等所有data改变完之后一块渲染页面. 
 















  













http://localhost:8080/v2/user/hyhaomanage/headline/submit
















  











