/******************************* vue 规范 eslint自检代码 *********************************/
1.vue 开启eslint 自检工具
    ESLint 是在 ECMAScript/JavaScript 代码中识别和报告模式匹配的工具，它的目标是保证代码的一致性和避免错误。在许多方面，它和 JSLint、JSHint 相似，除了少数的例外：
  为什么使用：
    你在接手一个项目的维护迭代任务，阅读代码的时候是否会因为项目中充斥着各种风格的代码而感到头疼？没错，eslint就是为了解决这类问题
  代码风格错误提示
    配置好eslint后，如果代码风格与配置描述的不符，eslint会提示代码中存在的风格问题；一般提示的情形有：
    1.编辑器内，大多数编辑器配置好后能读取eslint配置文件并在文件中进行相应提示
    2.eslint-loader配合webpack-dev-server能在页面中弹出相应错误内容
    3.eslint通过命令号对代码进行风格检查
  安装 
    npm install -g eslint  vue-cli创建项目时会询问你是否自动安装
  
  ESLint配置方式
    注释配置：使用js注释来直接嵌入ESLint配置信息到一个文件里

    配置文件：使用一个js文件，JSON或者YAML文件来给整个目录和它的子目录指定配置信息。这些配置可以写在一个文件名为.eslintrc.*的文件或者在package.json文件里的eslintConfig项里，

    这两种方式ESLint都会自动寻找然后读取，或者你也可以在命令行里指定一个配置文件。
  有几种东西是可以配置的
    环境：你的脚本会在哪种环境下运行。每个环境带来了一组特定的预定义的全局变量。

    全局变量：脚本运行期间会访问额外的全局变量。

    规则：使用那些规则，并且规则的等级是多少。
  ESLint的规则有三种级别
    "off"或者0，不启用这个规则

    "warn"或者1，出现问题会有警告

    "error"或者2，出现问题会报错
  配置安装
    1.
    首先查看项目中是否有 .eslintrc.js文件，如果没有就自己新建一个 .eslintrc.js文件，如果有，那么只需要修改即可，所有的代码大概如下
    .....配置信息....
    进入项目的根目录后，在命令行中 安装如下包
    npm install --save-dev babel-eslint eslint eslint-friendly-formatter eslint-loader 
eslint-plugin-html eslint-config-standard eslint-plugin-promise  eslint-plugin-standard
eslint-plugin-import eslint-plugin-node eslint-plugin-flow-vars eslint-plugin-react eslint-config-vue eslint-plugin-vue  
    
    2.
    也可以直接在 package.json 中devDependencies添加如下依赖于包,注意 eslint-plugin-html不要选择默认版本，一定要选择3.0.0； 如： "eslint-plugin-html": "^3.0.0"
    在package.json里写需要引用的包名
    然后在 webpack.base.conf.js 添加如下代码：(项目是基于vue-cli中配置的,就直接是脚手架默认生成的即可)
/*************************** 目录结构规范 ******************************************/
静态文件目录：
base （新的通用模块）
│ ├─static
│ │ ├─css
│ │ │ base_reset.css
│ │ │ wenda_component_20160318(日期).css
│ │ │
│ │ ├─image
│ │ │     base_bg.png
│ │ │     base_icon.png
│ │ │
│ │ └─js
│ │        base_ui.js
│ │        base_util.js
│ │
│ └─tel
│       base_demo.html
│       base_index.html

vue:利用vue-cli脚手架生成目录，
    src下放开发代码，
       components下放组件, view下放模板, store放vuex状态文件,mixins放混入组件里的代码
       assets放静态资源文件,api放axios请求相关
    public下放第三方插件代码

    mock 模拟请求数据 /模拟接口服务，自己用node写的接口服务，提供模拟数据用于前期开发

文件/资源命名 
    在 web 项目中，所有的文件名应该都遵循同一命名约定，使用语义化的文件命名，文件名要能“望文生义”，尽量避免使用拼音；
    文件名只使用字母 a-z，数字 0-9，连字符 -，下划线 _ 和句点 .；
    文件命名以字母开头而不是数字，而以特殊字符开头命名的文件，一般都有特殊的含义与用处；
    文件名中字母全部采用小写，多个单词用下划线分隔（识别效率较驼峰体高）；
    如需缩写单词，则应使用约定俗成的缩写形式，如 btn、nav、num、img 等，不能自造单词，以免引起歧义。

图片命名规则
    图标类图片，需在文件名前面加上 ico_ 前缀。
    背景类图片，需在文件名前面加上 bg_ 前缀。
    雪碧图图片，需在文件名后面加上 _sprite 后缀。
    Retina 图片，需在文件名后面加上 _1x 或 _2x 后缀来标记原图和 2 倍图。

/****************************** html 规范 *************************************/
页面开头必须有文档头声明，推荐使用 HTML5 简单的 doctype 声明来启用标准模式，使页面在每个浏览器中尽可能一致的展现。
1. 头部采用 HTML5 文档类型，并指定utf-8 编码， 示例：
 <!DOCTYPE HTML>
  <html>
    <meta charset="UTF-8">
  </html>
2.多语言需要指定语言
  <html lang="en"></html>

3.html 标签要语义化，不能都是div这样布局

4.属性值使用双引号，不要使用单引号；

5.缩进使用 1 个 Tab（占 2 个空格宽度）；

6.移动端h5页面要设置
<meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,minimum-scale=1,user-scalable=no"/>
7.meta 设置让ie用高级浏览器模式解析页面
  <meta http-equiv="X-UA-Compatible" content="IE=edge">

8. 无需为引入的 CSS 和 JavaScritp 指明 type 属性 （h5新规范可以不用制定type类型）

9.一般情况下，JavaScript 脚本应放在页面底部， 标签前面，以免阻塞页面加载，同时也避免了文档加载完成前 JS 无法获取 DOM 元素的问题。

/**************************** css 规范 ****************************************/
静态页面：html里用link引入  不用@import引入  因为link是html自带标签会优先引入样式，渲染页面速度更快
1.元素选择器用小写字母；
2.不允许驼峰命名多个字母用短杠分割
3.尽量不要使用id选择器
4.每个属性声明末尾都要加分号。
5.CSS url 的内容加引号有什么好处？
    降低内容路径被 XSS 注入攻击的风险；
    避免一些浏览器兼容问题。
6.Class 类名使用小写字母，以中划线分隔；
7. 声明顺序
    推荐的样式编写顺序依次为：
    Positioning（定位）
    Box model（盒模型）
    Typographic（排版）
    Visual（视觉）
    Misc（杂项）
8.属性值如果是 0，则省略单位，颜色 16 进制用小写字母，可以简写的要简写。
9.慎用 !important；尽量少用 * 选择器。
10.margin,padding,border等 尽量使用简写
11.尽量避免使用CSS Hack
12. 统一样式：hover颜色：#f30，并带下划线。
13.图标尽量使用Iconfont  字体图标
为了避免SVN增加冗余的图片，以后图片来源需要从CMS发布的图（Banner除外）切图的时候都要使用默认图

样式文件命名
全局样式
base.css

公共组建样式
component.css

各自频道公共组建样式
new_component_v1.css
new_component_v2.css
new_component_....css

/********************************* js 规范 ***********************************/
文件
    JavaScript 文件使用无 BOM 的 UTF-8 编码。
    所有js文件名，多个单词组成时，采用中划线连接方式，比如说： 账号模型文件 account-model.js
    在 JavaScript 文件中生成标签让内容变得更难查找，更难编辑，性能更差。应该尽量避免这种情况的出现。

缩进,分号,单行长度
    一律使用4个空格
    连续缩进同样适用4个空格，跟上一行对齐
    不允许使用 2 个空格 或 tab 字符。
    Statement 之后一律以分号结束， 不可以省略
    单行长度，理论上不要超过80列，不过如果编辑器开启 soft wrap 的话可以不考虑单行长度
    如果需要换行，存在操作符的情况，一定在操作符后换行，然后换的行缩进4个空格
    这里要注意，如果是多次换行的话就没有必要继续缩进了，比如说下边第二段这种就是最佳格式。
     if (typeof qqfind === "undefined" || typeof qqfind.cdnrejected === "undefined" || qqfind.cdnrejected !== true) { url = "http://pub.idqqimg.com/qqfind/js/location4.js"; } else { url = "http://find.qq.com/js/location4.js"; } 

空行
    方法之间加
    单行或多行注释前加
    逻辑块之间加空行增加可读性
     function () {} //这里是方法注释 function () {}

命名
    标准变量、函数采用Camel命名法
    使用ID的地方一定全大写
    使用的URL的地方一定全大写
    常量采用大写字母，下划线连接的方式
    类函数，大写第一个字母
    枚举变量 使用 Pascal命名法，枚举的属性 使用 全部字母大写，单词间下划线分隔 的命名方式。
    boolean 类型的变量使用 is 或 has 开头。

注释 //单行    /*多行*/

函数声明
    一定先声明再使用，不要利用 JavaScript 引擎的提升特性
    函数声明和函数表达式的不同，函数表达式的()前后必须有空格，函数声明在有函数名的时候不需要空格，没有函数名的时候需要空格。
    函数调用括号前后不需要空格
    “use strict” 不允许全局使用，必须放在函数的第一行，可以用自执行函数包含大的代码段
语言特性
    尽可能使用简洁的表达式
    对于相同变量或表达式的多值条件，用 switch 代替 if
    避免 == != 的使用， 用严格比较条件 === !==
    eval 非特殊业务， 禁用！！！
    with 非特殊业务， 禁用！！！

Array
   直接使用字面量方式定义，小心使用new Array() 因为传入参数不同会导致结果不一样
   由于空位的处理规则非常不统一，所以建议避免出现空位,数组空位有可能解析成undefined 有可能是保留空位。

变量声明
   用var声明变量 尽量在一开始声明，防止预解析出现报错问题

if else else前后留有空格

多个if else 条件判断  应该用 switch case 

谨慎使用闭包，会导致内存占用甚至泄漏问题，建议用对象方式隔离数据

vue
使用 Promise 避免 回调陷阱
使用 vuex 管理 复杂的 组件数据传递
编译代码时 保证eslint检测能通过
可以缓存的页面 建议用keep-alive做缓存 提高性能
利用本地存储localStorage 来存储一些 接口无法即时刷新返回新数据 的问题

/******************************* vue 优化 *****************************/
1.代码包优化
  屏蔽sourceMap
  对项目代码中的JS/CSS/SVG(*.ico)文件进行gzip压缩
  对路由组件进行懒加载
  {
    path: "/",
    name: "home",
    component: resolve=>require(["@/views/home"],resolve), //懒加载
  对于可以缓存的页面用
   keep-alive 缓存页面

2.源码优化
   v-if 和 v-show选择调用

   为item设置唯一key值

   细分vuejs组件

   减少watch的数据

   内容类系统的图片资源按需加载
   对于内容类系统的图片按需加载，如果出现图片加载比较多，可以先使用v-lazy之类的懒加载库或者绑定鼠标的scroll事件

   避免加载慢或者闪现
   先加载一个等待页面，然后用Promise.all 来等待所有需要的数据加载完后 再出现页面

   骨架屏加载
   在图片资源加载出来前，可以用一个默认样式占住页面给人感觉有内容。














