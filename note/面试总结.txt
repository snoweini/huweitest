/*********** sass 和 less 区别 ****************/
 相同之处：
Less和Sass在语法上有些共性，比如下面这些：
1、混入(Mixins)——class中的class；
2、参数混入——可以传递参数的class，就像函数一样；
3、嵌套规则——Class中嵌套class，从而减少重复的代码；
4、运算——CSS中用上数学；
5、颜色功能——可以编辑颜色；
6、名字空间(namespace)——分组样式，从而可以被调用；
7、作用域——局部修改样式；
8、JavaScript 赋值——在CSS中使用JavaScript表达式赋值。
不同之处
1、Less在JS上运行，Sass在Ruby上使用。
Sass基于Ruby，需要安装Ruby。Less和Sass在Ruby中构建相似，但它已被移植到JavaScript中。为了使用LESS，我们可以将适用的JavaScript文件上载到服务器或通过脱机编译器编译CSS表。
2、编写变量的方式不同。
Sass使用$，而Less使用@。
3、在Less中，仅允许循环数值。
在Sass中，我们可以遍历任何类型的数据。但在Less中，我们只能使用递归函数循环数值。
4、Sass有Compass，Less有Preboot
Sass和LESS有可用于集成mixins的扩展（在整个站点中存储和共享CSS声明的能力）。
Sass有适用于mixins的Compass，其中包括所有可用的选项以及未来支持的更新。
LESS有Preboot.less，LESS Mixins，LESS Elements，gs和Frameless。LESS的软件支持比Sass更加分散，导致许多不同的扩展选项可能不会以相同的方式运行。对于项目，我们可能需要所有列出的扩展以获得与Compass类似的性能。

/************* keep-alive的生命周期 ****************/
activated： 页面第一次进入的时候，钩子触发的顺序是created->mounted->activated
deactivated:  页面退出的时候会触发deactivated，当再次前进或者后退的时候只触发activated

keep-alive prop属性：
include 字符串或正则表达式，只有名称匹配的组件会被缓存
exclude 字符串或正则表达式，任何名称匹配的组件都不会被缓存
max 数字，最多可以缓存多少组件实例
例子：
<keep-alive include="test-keep-alive">
//将缓存name为test-keep-alive的组件
    <component></component>
</keep-alive>
<keep-alive exclude="test-keep-alive">
  <!-- 将不缓存name为test-keep-alive的组件 -->
  <component></component>
</keep-alive>

/************* vue路由懒加载 *****************/
一、为什么要使用路由懒加载
为给客户更好的客户体验，首屏组件加载速度更快一些，解决白屏问题。
二、定义
懒加载简单来说就是延迟加载或按需加载，即在需要的时候的时候进行加载。
三、使用
常用的懒加载方式有两种：即使用vue异步组件 和 ES中的import
vue异步组件实现懒加载
方法如下：component：resolve=>(require(['需要加载的路由的地址'])，resolve)
例子：
component: resolve=>(require(["@/components/HelloWorld"],resolve))

ES 提出的import方法，（------最常用------）
方法如下：const HelloWorld = （）=>import('需要加载的模块地址')（不加 { } ，表示直接return）
例子：
const HelloWorld = ()=>import("@/components/HelloWorld")
export default new Router({
  routes: [
    {
      path: '/',
      name: 'HelloWorld',
      component:HelloWorld
    }
  ]
})
四、组件懒加载
相同与路由懒加载，
例子：
<template>
  <div class="hello">
  <One-com></One-com>
  </div>
</template>

<script>
const One = ()=>import("./one");
export default {
  components:{
    "One-com":One
  },
  data () {
    return {
      msg: 'Welcome to Your Vue.js App'
    }
  }
}
</script>

/****************** vue中父子组件的生命周期 **********************/
父组件先创建，然后子组件创建；子组件先挂载，然后父组件挂载。
父 beforeCreate -> created -> 子 beforeCreate -> created -> beforeMount -> mounted -> 父 beforeMount -> mounted
Vue父子组件生命周期钩子的执行顺序遵循：从外到内，然后再从内到外，不管嵌套几层深，也遵循这个规律。

/***************** 组件 v-if 和 v-show 切换时生命周期钩子的执行 ******************/
v-if
初始渲染
初始值为 false 组件不会渲染，生命周期钩子不会执行，v-if 的渲染是惰性的。
初始值为 true 时，组件会进行渲染，并依次执行 beforeCreate,created,beforeMount,mounted 钩子。
切换
false => true
依次执行 beforeCreate,created,beforeMount,mounted 钩子。
true => false
依次执行 beforeDestroy,destroyed 钩子。

v-show
渲染
无论初始状态，组件都会渲染，依次执行 beforeCreate,created,beforeMount,mounted 钩子，v-show 的渲染是非惰性的。
切换
对生命周期钩子无影响，切换时组件始终保持在 mounted 钩子。

/****************** vue路由实现原理 *************************/
大型单页应用最显著特点之一就是采用的前端路由系统，通过改变URL，在不重新请求页面的情况下，更新页面视图。
目前在浏览器环境中这一功能的实现主要有2种方式：
1.利用URL中的hash("#");
2.利用History interface在HTML5中新增的方法;
mode 参数：
　　　　1.默认 hash
　　　　2. history。如果浏览器不支持 history 新特性，则采用 hash
　　　　3. 如果不在浏览器环境下，就采用 abstract（Node环境下）
在vue里
在初始化对应的history之前，会对mode做一些校验：若浏览器不支持HTML5History方式(通过supportsPushState变量判断)，则mode设为hash;若不是在浏览器环境下运行，则mode设为abstract;
VueRouter类中的onReady(),push()等方法只是一个代理，实际是调用的具体history对象的对应方法，在init()方法中初始化时，也是根据history对象具体的类别执行不同操作

HashHistory
hash("#")符号的本来作用是加在URL指示网页中的位置：
#本身以及它后面的字符称之为hash可通过window.location.hash属性读取.
hash虽然出现在url中，但不会被包括在http请求中，它是用来指导浏览器动作的，对服务器端完全无用，因此，改变hash不会重新加载页面。
可以为hash的改变添加监听事件：
window.addEventListener("hashchange",funcRef,false)
每一次改变 hash(window.localtion.hash)，都会在浏览器访问历史中增加一个记录。
HashHistory 拥有两个方法，一个是 push， 一个是 replace
两个方法：HashHistory.push() 和 HashHistory.replace()
HashHistory.push()  将新路由添加到浏览器访问历史的栈顶

HashHistory.replace()
replace()方法与push()方法不同之处在于，它并不是将新路由添加到浏览器访问历史的栈顶，而是替换掉当前的路由

HTML5History
History interface 是浏览器历史记录栈提供的接口，通过back()、forward()、go()等方法，我们可以读取浏览器历史记录栈的信息，进行各种跳转操作。
从 HTML5开始，History interface 提供了2个新的方法：pushState()、replaceState() 使得我们可以对浏览器历史记录栈进行修改：
window.history.pushState(stateObject,title,url)
window.history,replaceState(stateObject,title,url)
这2个方法有个共同的特点：当调用他们修改浏览器历史栈后，虽然当前url改变了，但浏览器不会立即发送请求该url，这就为单页应用前端路由，更新视图但不重新请求页面提供了基础
1.push
与hash模式类似，只是将window.hash改为history.pushState
2.replace
与hash模式类似，只是将window.replace改为history.replaceState
3.监听地址变化
在HTML5History的构造函数中监听popState（window.onpopstate）

两种模式比较
一般的需求场景中，hash模式与history模式是差不多的，根据MDN的介绍，调用history.pushState()相比于直接修改hash主要有以下优势：
pushState设置的新url可以是与当前url同源的任意url,而hash只可修改#后面的部分，故只可设置与当前同文档的url
pushState设置的新url可以与当前url一模一样，这样也会把记录添加到栈中，而hash设置的新值必须与原来不一样才会触发记录添加到栈中
pushState通过stateObject可以添加任意类型的数据记录中，而hash只可添加短字符串
pushState可额外设置title属性供后续使用
缺点
history模式则会将URL修改得就和正常请求后端的URL一样,如后端没有配置对应/user/id的路由处理，则会返回404错误






