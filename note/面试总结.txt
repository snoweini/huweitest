/*********** sass 和 less 区别 ****************/
 相同之处：
Less和Sass在语法上有些共性，比如下面这些：
1、混入(Mixins)——class中的class；
2、参数混入——可以传递参数的class，就像函数一样；
3、嵌套规则——Class中嵌套class，从而减少重复的代码；
4、运算——CSS中用上数学；
5、颜色功能——可以编辑颜色；
6、名字空间(namespace)——分组样式，从而可以被调用；
7、作用域——局部修改样式；
8、JavaScript 赋值——在CSS中使用JavaScript表达式赋值。
不同之处
1、Less在JS上运行，Sass在Ruby上使用。
Sass基于Ruby，需要安装Ruby。Less和Sass在Ruby中构建相似，但它已被移植到JavaScript中。为了使用LESS，我们可以将适用的JavaScript文件上载到服务器或通过脱机编译器编译CSS表。
2、编写变量的方式不同。
Sass使用$，而Less使用@。
3、在Less中，仅允许循环数值。
在Sass中，我们可以遍历任何类型的数据。但在Less中，我们只能使用递归函数循环数值。
4、Sass有Compass，Less有Preboot
Sass和LESS有可用于集成mixins的扩展（在整个站点中存储和共享CSS声明的能力）。
Sass有适用于mixins的Compass，其中包括所有可用的选项以及未来支持的更新。
LESS有Preboot.less，LESS Mixins，LESS Elements，gs和Frameless。LESS的软件支持比Sass更加分散，导致许多不同的扩展选项可能不会以相同的方式运行。对于项目，我们可能需要所有列出的扩展以获得与Compass类似的性能。

/************* keep-alive的生命周期 ****************/
activated： 页面第一次进入的时候，钩子触发的顺序是created->mounted->activated
deactivated:  页面退出的时候会触发deactivated，当再次前进或者后退的时候只触发activated

keep-alive prop属性：
include 字符串或正则表达式，只有名称匹配的组件会被缓存
exclude 字符串或正则表达式，任何名称匹配的组件都不会被缓存
max 数字，最多可以缓存多少组件实例
例子：
<keep-alive include="test-keep-alive">
//将缓存name为test-keep-alive的组件
    <component></component>
</keep-alive>
<keep-alive exclude="test-keep-alive">
  <!-- 将不缓存name为test-keep-alive的组件 -->
  <component></component>
</keep-alive>

/************* vue路由懒加载 *****************/
一、为什么要使用路由懒加载
为给客户更好的客户体验，首屏组件加载速度更快一些，解决白屏问题。
二、定义
懒加载简单来说就是延迟加载或按需加载，即在需要的时候的时候进行加载。
三、使用
常用的懒加载方式有两种：即使用vue异步组件 和 ES中的import
vue异步组件实现懒加载
方法如下：component：resolve=>(require(['需要加载的路由的地址'])，resolve)
例子：
component: resolve=>(require(["@/components/HelloWorld"],resolve))

ES 提出的import方法，（------最常用------）
方法如下：const HelloWorld = （）=>import('需要加载的模块地址')（不加 { } ，表示直接return）
例子：
const HelloWorld = ()=>import("@/components/HelloWorld")
export default new Router({
  routes: [
    {
      path: '/',
      name: 'HelloWorld',
      component:HelloWorld
    }
  ]
})
四、组件懒加载
相同与路由懒加载，
例子：
<template>
  <div class="hello">
  <One-com></One-com>
  </div>
</template>

<script>
const One = ()=>import("./one");
export default {
  components:{
    "One-com":One
  },
  data () {
    return {
      msg: 'Welcome to Your Vue.js App'
    }
  }
}
</script>



















