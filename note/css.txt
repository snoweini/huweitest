/**************************************************/
flex布局总结
父级里
display:flex; 强调用flex布局
flex-wrap:如果父级被撑满如何排列，wrap换行,nowrap强制在一行;
flex-direction:规定flex里布局方向，row横向从左到右，column纵向从上到下;
align-items (适用于父类容器上)align-items:center;
设置或检索弹性盒子元素在侧轴（纵轴）方向上的对齐方式。flex-start,flex-end,center,baseline,strecth
justify-content(父容器上) 定义横轴排列方式
设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式 flex-start,flex-end,center,space-between,space-around,space-evenly

排列的子元素里
flex-grow:如果父级有多余的则放大占领多余的空间;
flex-shrink 如果父级空间不够 则缩小以适应
flex-basis 替换width声明  声明这个元素的宽度，会覆盖width属性
//简写
flex:0 0 50%; 等价于 flex-grow:0; flex-shrink:0; flex-basis:50%;
注意flex:0 0 0和flex:0 0 0%意义是不一样的；
简单的例子：
<div class="wrap"> 
   <ul class="main">
     <li></li>
     <li style="height:200px;"></li>
     <li></li>
   </ul> 
</div>
.wrap{width:100%;}
.main{display: flex; flex-direction:row;flex-wrap:wrap; align-items:center;justify-content:flex-start;}
.main li{flex:0 0 25%;height:100px; background:#ccc;list-style: none; margin-left:5%;margin-top:20px;}
/*********************************************************************************************************/
//css3引入本地字体文件
@font-face{
	font-family:fzjq;  //给引入字体文件命名  不需要''  font-family不需要引号
	src:url('../../static/fzjqgbk.ttf') //引用路径
}

/************************************************************************************/
CSS3 @media 查询
//实例
如果文档宽度小于 300 像素则修改背景颜色(background-color):
@media screen and (max-width: 300px) {
    body {
        background-color:lightblue;
    }
}
//语法
@media mediatype and|not|only (media feature) {
    CSS-Code;
}
mediatype一般用 screen	用于检测电脑屏幕，平板电脑，智能手机等。

/***********************************************************************************/
h5头部信息
<head>
　　<meta charset="utf-8">
　　<title>口袋小鼠</title>
　　<meta name="description" content="">
　　<!-- 避免IE使用兼容模式 -->
　　<meta http-equiv="X-UA-Compatible" content="IE=edge">
　　<!-- 启用360浏览器的极速模式(webkit) -->
　　<meta name="renderer" content="webkit">
　　<!-- 是否启动webapp功能，会删除默认的苹果工具栏和菜单栏。 -->
　　<meta name="apple-mobile-web-app-capable" content="yes">
　　<!-- 据实际的页面设计的主体色为搭配来进行设置。 -->
　　<meta name="apple-mobile-web-app-status-bar-style" content="black">
　　<!-- 忽略页面中的数字识别为电话号码,email识别 -->
　　<meta name="format-detection" content="telephone=no, email=no">
　　<!-- 视图窗口，移动端特属的标签。 -->
　　<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">
</head>

/****************************************************************************************/
//CSS Colors
CSS的颜色可以通过以下方法指定：

1十六进制颜色 #ff0000;
2RGB颜色     rgb(255,0,0);
3RGBA颜色    rgba(255,0,0,0.5);
4HSL色彩     hsl(120,65%,75%);
5HSLA颜色    hsla(120,65%,75%,0.3);
6预定义/跨浏览器的颜色名称  blue   red  yellow....

/**************************************************************************************/
//CSS calc() 函数
使用 calc() 函数计算 <div> 元素的宽度:
//定义与用法
calc() 函数用于动态计算长度值。

需要注意的是，运算符前后都需要保留一个空格，例如：width: calc(100% - 10px)；
任何长度值都可以使用calc()函数进行计算；
calc()函数支持 "+", "-", "*", "/" 运算；
calc()函数使用标准的数学运算优先级规则；
#div1 {
    position: absolute;
    left: 50px;
    width: calc(100% - 100px);
    border: 1px solid black;
    background-color: yellow;
    padding: 5px;
    text-align: center;
}
/**************************************************************************************/
//css3动画
背景颜色逐渐地从红色变化到蓝色：

@keyframes mymove
    {
    from {background-color:red;}
    to {background-color:blue;}
}
 
/*Safari 和 Chrome:*/
@-webkit-keyframes mymove
{
    from {background-color:red;}
    to {background-color:blue;} 
}
#test{animation:mymove  infinite  2s alternate;}
infinite:重复无数次
alternate:到终点后再从终点运动会起点
第一个时间是动画持续时间   第二个时间是延迟开始动画的时间



forwards 只执行一次然后停在动画最后的属性值

/////////////////////////
//过渡动画
div
{
transition: width 1s linear 2s;
}
background:
   多重背景图片：background-image属性
        background 在css3可以引入多个background-image
        background:
          url(....) top left,
          url(....) top right,
          linear-gradient(to bottom,blue,red)

    背景图片区域：background-clip属性
        background-clip: border-box;    // 背景被裁剪到边框
        background-clip: padding-box;   // 背景被裁剪到内边距
        background-clip: content-box;   // 背景被裁剪到内容框

    背景图片大小：background-size属性
        background-size: contain;      // 将背景图片等比例缩放至某一边紧贴容器边缘为止
        background-size: cover;        // 将背景图片等比例缩放以填满整个容器
        background-size: 800px 500px;  // 背景图片的宽度是800px，高度是500px
        background-size: 800px;        // 相当于800px auto，背景图片的宽度是800px，高度等比例缩放
        background-size: 50% 50%;      // 背景图片的宽度/高度都是容器的50%
        background-size: 50%;          // 相当于50% auto，背景图片的宽度是容器宽度的50%，高度等比例缩放
        background-size: 100% 100%;    // 背景图片的宽度/高度都是容器的100%
        background-size: 100%;         // 相当于100% auto，背景图片的宽度是容器宽度的100%，高度等比例缩放
    背景属性整合：background属性
        概念：在一个声明中设置所有的背景属性
        语法：background:color position size repeat origin clip attachment image
        background: #abcdef center 50% no-repeat content-box content-box fixed url('bg1.jpg');

        // 经验之谈，还是建议以这种形式来写
        background: #abcdef url('bg1.jpg') no-repeat center center;
        background-size: 50%;
        background-origin: content-box;
        background-clip: content-box;
        background-attachment: fixed;
    CSS3渐变
        渐变(gradients)可以在两个或多个指定的颜色之间显示平稳的过渡。

        线性渐变：linear Gradients属性
        background: linear-gradient(direction, color-stop1,color-stop2,...)

        径向渐变：linear Gradients属性
        概念：从起点到终点颜色从内向外进行圆形渐变(从中间向外拉)
        语法：radial-gradient(center, shape size, start-color , ... , last-color);
        // 设置形状
        // radial-gradient(shape, start-color , ... , last-color);
        // circle：圆形，ellipse：椭圆（默认）
/*****************************************************/

移动端优化总结：
   1.尽量用css3 tranform里的属性来做动画， 不要用定位left, top。
   2.渐变用css3的 linear-gradient 来处理，不要用切图平铺
   3.icon图标 可以用font-icon图标代替
   4.引用资源文件都打包成一个文件,减少请求次数

/**************************************** 兼容问题汇总 ********************************************/
1.改变盒子模型：
box-sizing: border-box;  //border padding 会包含在width内  width = border+padding+实际width
                         //默认content-box  width只是实际的width 不含border,padding宽度

2.IOS移动端click事件300ms的延迟响应 //造成移动端下击透的问题，还会造成按钮点击延迟甚至是点击失效
                              //触摸事件的响应顺序为 touchstart --> touchmove --> touchend --> click,
    解决：1.可以通过绑定ontouchstart事件，加快对事件的响应，解决300ms延迟问题
         2.可以在tap点击时 事件里阻止默认行为 e.preventDefault()
         3.比较笨的办法 做一个延时， 300ms后再执行

3.h5底部输入框被键盘遮挡问题
    解决:动态改变输入框的位置；

4.不让 Android 手机识别邮箱
<meta content="email=no" name="format-detection" />

5.禁止 iOS 识别长串数字为电话
<meta content="telephone=no" name="format-detection" />

6.消除 transition 闪屏
-webkit-transform-style: preserve-3d;     /*设置内嵌的元素在 3D 空间如何呈现：保留 3D*/
-webkit-backface-visibility: hidden;      /*(设置进行转换的元素的背面在面对用户时是否可见：隐藏)*/

7.禁止ios和android用户选中文字
-webkit-user-select:none

8.在ios和andriod中,audio元素和video元素在无法自动播放
   因为安全问题，无法直接用代码让初始化的媒体标签自动播放媒体文件，必须有一个用户点击行为触发；
   触屏即播
    $('html').one('touchstart',function(){
        audio.play()
    })
   透过触屏时就触发，活着把标签隐藏性的叠加到事件dom上来触发，播放后的切换不要销毁媒体标签再创建（不然需要再次点击触发）
   我们只需要切换播放的数据即可。

9.ios下取消input在输入的时候英文首字母的默认大写
   <input autocapitalize="off" autocorrect="off" />

10.CSS动画页面闪白,动画卡顿
    解决方法:
    1.尽可能地使用合成属性transform和opacity来设计CSS3动画，不使用position的left和top来定位
    2.开启硬件加速
      -webkit-transform: translate3d(0, 0, 0);   //使用translate3d 会让硬件加速渲染。
         -moz-transform: translate3d(0, 0, 0);
          -ms-transform: translate3d(0, 0, 0);
              transform: translate3d(0, 0, 0);

11.fixed定位缺陷
    ios下fixed元素容易定位出错，软键盘弹出时，影响fixed元素定位
    android下fixed表现要比iOS更好，软键盘弹出时，不会影响fixed元素定位

12.阻止旋转屏幕时自动调整字体大小
html, body, form, fieldset, p, div, h1, h2, h3, h4, h5, h6 {-webkit-text-size-adjust:none;}

13.Input 的placeholder会出现文本位置偏上的情况
    input 的placeholder会出现文本位置偏上的情况：
    PC端设置line-height等于height能够对齐，而移动端仍然是偏上，解决是设置line-height：normal

14.在移动端修改难看的点击的高亮效果，iOS和安卓下都有效：
   * {-webkit-tap-highlight-color:rgba(0,0,0,0);}
 
15.Zepto点透的解决方案
    点击穿透的原因:
    1.浏览器有300ms的延时为了区别是double click还是缩放
    2.移动端事件的响应顺序 touchstart -> touchmove -> touchend -> tap -> click
    在300ms时间范围内,上层元素隐藏了或移开了,下层相同位置的元素触发了click事件(普通元素是click事件回调函数效果,input，select是focus事件,超链接是页面跳转)
    解决方案是：
    1.下层元素本身无click事件,没有input select a标签,统一使用touch事件

    方案二：下层元素本身无click事件,在上方元素的touchend事件回调函数中,阻止后续触发默认事件 e.preventDefault();

    1 $("#cbFinish").on("touchend", function (event) {
    2     //很多处理比如隐藏什么的
    3     event.preventDefault();
    4 });
    方案三：延迟一定的时间(300ms+)来处理事件

    1 $("#cbFinish").on("tap", function (event) {
    2     setTimeout(function(){
    3     //很多处理比如隐藏什么的
    4     },320);
    5 });    

16. 叠加区高亮
    在部分android机型中点击页面某一块区域可能会出现如图所示的黄色框秒闪，这是部分机型系统自身的默认定制样式，给该元素一个CSS样式重置掉：-webkit-tap-highlight-color:rgba(0,0,0,0);

17.iphone及ipad下输入框默认内阴影
    element{
        -webkit-tap-highlight-color:rgba(255,255,255,0);
    }
  
18.1px边框

19.响应式图片
   在移动端中，图片的处理应该是很谨慎的，假设有一张图片本身的尺寸是X宽，设置和包裹它的div一样宽，如果是div宽度小于图片宽度没有问题，但是如果div宽度大于图片的宽度，图片被拉伸失真
    解决方法：让图片最大只能是自己的宽度

    img{

    max-width: 100%;

    display: block;

    margin: 0 auto;

    } 

20.点透bug的产生
    div是绝对定位的蒙层，并且z-index高于a。而a标签是页面中的一个链接，我们给div绑定tap事件：
    我们点击蒙层时div正常消失，但是当我们在a标签上点击蒙层时，发现a链接被触发，这就是所谓的点透事件。
    原因：
    touchstart早于touchend早于click。即click的触发是由延迟的，这个时间大概在300ms左右，也就是说我们tap触发之后蒙层隐藏。此时click还没有触发，300ms之后由于蒙层隐藏，我们的click触发到了下面的a链接。
    解决：
    1.尽量都使用touch事件来替换click事件。例如用touchend事件（推荐）
    2.用fastclick
    3.用preventDefault阻止a标签的click

21.滑动穿透
   弹出层滑动时，底部背景层也跟着滑动问题；
   解决：1.在弹出层后 把背景层overflow:hidden 隐藏滚动条，同时阻止事件冒泡到背景层+阻止默认事件。
        取消的时候再恢复背景层的滚动条

        2.弹出时，记录scrollTop 把底层 fixed 脱离文档流 然后固定到负的scrollTop处。
          隐藏弹出时，去掉fixed 还原scrollTop

22.h5拉到底部时 整个页面被下来一段距离
   把body上的默认阻止可以解决
   document.body.addEventListener('touchmove', function (e) {
        e.preventDefault(); //阻止默认的处理方式(阻止下拉滑动的效果)
    }, {
        passive: false
    });
   //passive 参数不能省略，用来兼容ios和android
   //如果设置了passive为true，同时又阻止默认行为，阻止是不生效的
   默认使用passive:true提高滚动性能并减少崩溃，passive即顺从的，是指它顺从浏览器的默认行为。设置该属性的目的主要是为了在阻止事件默认行为导致的卡顿。一般我们写阻止默认行为的代码如下：
   如果我们阻止了这一默认行为，浏览器是无法预先知道的，必须等待事件监听器执行完成后，才知道要去阻止默认行为。等待监听器的执行是耗时的，，有些甚至耗时很明显，这样就会导致页面卡顿。即便监听器是个空函数，也会产生一定的卡顿，毕竟空函数的执行也会耗时。所以就有了passive属性，如果要阻止默认事件可以设置passive：false，












